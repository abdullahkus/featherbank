services:
  keycloak:
    image: quay.io/keycloak/keycloak
    container_name: keycloak
    ports:
      - 7080:8080
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev"
    volumes:
      - featherbank-keycloak-data:/opt/keycloak/data
    extends:
      file: common-config.yml
      service: network-deploy-service

  accountsdb:
    image: mysql
    container_name: accountsdb
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: accountsdb
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "accountsdb" ]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    volumes:
      - featherbank-accountsdb-data:/var/lib/mysql
    extends:
      file: common-config.yml
      service: microservice-db-config

  cardsdb:
    image: mysql
    container_name: cardsdb
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: cardsdb
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "cardsdb" ]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    volumes:
      - featherbank-cardsdb-data:/var/lib/mysql
    extends:
      file: common-config.yml
      service: microservice-db-config

  loansdb:
    image: mysql
    container_name: loansdb
    ports:
      - 3308:3306
    environment:
      MYSQL_DATABASE: loansdb
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "loansdb" ]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    volumes:
      - featherbank-loansdb-data:/var/lib/mysql
    extends:
      file: common-config.yml
      service: microservice-db-config

  rabbit:
    container_name: rabbit
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    volumes:
      - featherbank-rabbitmq-data:/var/lib/rabbitmq
    extends:
      file: common-config.yml
      service: network-deploy-service

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - 9411:9411
    healthcheck:
      test: "wget -qO- http://zipkin:9411/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: network-deploy-service

  read:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      featherbank:
        aliases:
          - loki

  write:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy-dev:latest
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command:  run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - featherbank

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    volumes:
        - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - featherbank

  backend:
    image: grafana/loki:3.0.0
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - featherbank

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - featherbank

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: "redis-cli ping"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:
    image: "abdullahkus/featherbank-configserver:s13"
    container_name: configserver
    ports:
      - "8071:8071"
    depends_on:
      rabbit:
        condition: service_healthy
    healthcheck:
      test: "wget -qO- http://configserver:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: "abdullahkus/featherbank-eurekaserver:s13"
    container_name: eurekaserver
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "wget -qO- http://eurekaserver:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8071/"

  accounts:
    image: "abdullahkus/featherbank-accounts:s13"
    container_name: accounts
    ports:
      - "8080:8080"
    depends_on:
      configserver:
        condition: service_healthy
      accountsdb:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    healthcheck:
      test: "wget -qO- http://accounts:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3306/accountsdb"
      SPRING_RABBITMQ_HOST: rabbit
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  loans:
    image: "abdullahkus/featherbank-loans:s13"
    container_name: loans
    ports:
      - "8090:8090"
    depends_on:
      configserver:
        condition: service_healthy
      loansdb:
        condition: service_healthy
    healthcheck:
      test: "wget -qO- http://loans:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "loans"
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3306/loansdb"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  cards:
    image: "abdullahkus/featherbank-cards:s13"
    container_name: cards
    ports:
      - "9000:9000"
    depends_on:
      configserver:
        condition: service_healthy
      cardsdb:
        condition: service_healthy
    healthcheck:
      test: "wget -qO- http://cards:9000/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "cards"
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3306/cardsdb"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  gatewayserver:
    image: "abdullahkus/featherbank-gatewayserver:s13"
    container_name: gatewayserver
    ports:
      - "8072:8072"
    depends_on:
      configserver:
        condition: service_healthy
      accounts:
        condition: service_healthy
      loans:
        condition: service_healthy
      cards:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  message:
    image: "abdullahkus/featherbank-message:s13"
    container_name: message
    depends_on:
      rabbit:
        condition: service_healthy
    environment:
      SPRING_RABBITMQ_HOST: rabbit
    extends:
      file: common-config.yml
      service: network-deploy-service

networks:
  featherbank:
    name: featherbank
    driver: bridge

volumes:
  featherbank-accountsdb-data:
    name: featherbank-accountsdb-data
  featherbank-cardsdb-data:
    name: featherbank-cardsdb-data
  featherbank-loansdb-data:
    name: featherbank-loansdb-data
  featherbank-zipkindb-data:
    name: featherbank-zipkindb-data
  featherbank-rabbitmq-data:
    name: featherbank-rabbitmq-data
  featherbank-keycloak-data:
    name: featherbank-keycloak-data